{"version":3,"sources":["containers/Auth/Auth.module.css","containers/Auth/Auth.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css"],"names":["module","exports","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","updateObject","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElementsArray","key","push","id","config","form","map","formElement","invalid","shouldValidate","changed","loading","errorMessage","error","message","authRedirect","isAuthenticated","to","className","classes","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions","input","inputElement","inputClasses","InputElement","Invalid","join","onChange","options","option","displayValue","validationError","ValidationError","Input","Label","label"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,KAAO,mBAAmB,MAAQ,sB,sKCU9CC,E,4MAEFC,MAAQ,CACJC,SAAW,CACPC,MAAQ,CACJC,YAAc,QACdC,cAAgB,CACZC,KAAO,QACPC,YAAc,gBAElBC,MAAQ,GACRC,WAAa,CACTC,UAAW,EACXC,SAAU,GAEdC,OAAQ,EACRC,SAAU,GAEdC,SAAW,CACPV,YAAc,QACdC,cAAgB,CACZC,KAAO,WACPC,YAAc,YAElBC,MAAQ,GACRC,WAAa,CACTC,UAAW,EACXK,UAAY,GAEhBH,OAAQ,EACRC,SAAU,IAGlBG,UAAW,G,EASfC,oBAAsB,SAACC,EAAOC,GAE1B,IAAMC,EAAkBC,YAAa,EAAKpB,MAAMC,SAAZ,eAC/BiB,EAAcE,YAAa,EAAKpB,MAAMC,SAASiB,GAAa,CACzDX,MAAOU,EAAMI,OAAOd,MACpBI,MAAQW,YAAcL,EAAMI,OAAOd,MAAM,EAAKP,MAAMC,SAASiB,GAAaV,YAC1EI,SAAU,MAGlB,EAAKW,SAAS,CAACtB,SAAWkB,K,EAG9BK,cAAgB,SAACP,GACbA,EAAMQ,iBACN,EAAKC,MAAMC,OAAO,EAAK3B,MAAMC,SAASC,MAAMK,MAAO,EAAKP,MAAMC,SAASY,SAASN,MAAO,EAAKP,MAAMe,W,EAGtGa,sBAAwB,WACpB,EAAKL,UAAS,SAAAM,GACV,MAAO,CAACd,UAAYc,EAAUd,c,uDAzBtC,WACQe,KAAKJ,MAAMK,gBAAkD,MAAhCD,KAAKJ,MAAMM,kBACxCF,KAAKJ,MAAMO,0B,oBA2BnB,WAAU,IAAD,OACCC,EAAoB,GAC1B,IAAI,IAAIC,KAAOL,KAAK9B,MAAMC,SACtBiC,EAAkBE,KAAK,CACnBC,GAAIF,EACJG,OAASR,KAAK9B,MAAMC,SAASkC,KAIrC,IAAII,EAAOL,EAAkBM,KAAI,SAAAC,GAAW,OACxC,cAAC,IAAD,CAEItC,YAAasC,EAAYH,OAAOnC,YAChCC,cAAeqC,EAAYH,OAAOlC,cAClCG,MAAOkC,EAAYH,OAAO/B,MAC1BmC,SAAUD,EAAYH,OAAO3B,MAC7BgC,eAAgBF,EAAYH,OAAO9B,WACnCI,QAAS6B,EAAYH,OAAO1B,QAC5BgC,QAAS,SAAC3B,GAAD,OAAW,EAAKD,oBAAoBC,EAAMwB,EAAYJ,MAP1DI,EAAYJ,OAWtBP,KAAKJ,MAAMmB,UACVN,EAAO,cAAC,IAAD,KAGX,IAAIO,EAAe,KAEhBhB,KAAKJ,MAAMqB,QACVD,EACI,4BAAIhB,KAAKJ,MAAMqB,MAAMC,WAI7B,IAAIC,EAAe,KAInB,OAHGnB,KAAKJ,MAAMwB,kBACVD,EAAe,cAAC,IAAD,CAAUE,GAAIrB,KAAKJ,MAAMM,oBAGxC,sBAAKoB,UAAWC,IAAQtD,KAAxB,UACKkD,EACAH,EACD,uBAAMQ,SAAUxB,KAAKN,cAArB,UACKe,EACD,cAAC,IAAD,CAAQgB,QAAQ,UAAhB,uBAEJ,eAAC,IAAD,CACIC,QAAS1B,KAAKF,sBACd2B,QAAQ,SAFZ,uBAEgCzB,KAAK9B,MAAMe,SAAW,SAAW,mB,GAjH9D0C,aAwIJC,uBAjBS,SAAA1D,GACpB,MAAO,CACH6C,QAAU7C,EAAM2D,KAAKd,QACrBE,MAAQ/C,EAAM2D,KAAKZ,MACnBG,gBAAuC,OAArBlD,EAAM2D,KAAKC,MAC7B7B,eAAiB/B,EAAM6D,cAAcC,SACrC9B,iBAAmBhC,EAAM2D,KAAK3B,qBAIX,SAAA+B,GACvB,MAAO,CACHpC,OAAS,SAACzB,EAAOW,EAAUE,GAAlB,OAA+BgD,EAASC,IAAa9D,EAAOW,EAAUE,KAC/EkB,sBAAwB,kBAAM8B,EAASC,IAA4B,UAI5DN,CAA4C3D,I,2EC1F5CkE,IAtDD,SAACvC,GAEX,IAAIwC,EAAe,KACbC,EAAe,CAACd,IAAQe,cAM9B,OAJI1C,EAAMgB,SAAWhB,EAAMiB,gBAAkBjB,EAAMd,SAC/CuD,EAAa/B,KAAKiB,IAAQgB,SAGtB3C,EAAMvB,aACV,IAAO,QACH+D,EAAe,+CACKd,UAAWe,EAAaG,KAAK,MACzB5C,EAAMtB,eAFf,IAGKG,MAAOmB,EAAMnB,MACbgE,SAAU7C,EAAMkB,WACpC,MACJ,IAAO,WACHsB,EAAe,kDACKd,UAAWe,EAAaG,KAAK,MACzB5C,EAAMtB,eAFf,IAGKG,MAAOmB,EAAMnB,MACbgE,SAAU7C,EAAMkB,WACpC,MACJ,IAAO,SACHsB,EAAgB,wBACId,UAAWe,EAAaG,KAAK,KAC7B/D,MAAOmB,EAAMnB,MACbgE,SAAU7C,EAAMkB,QAHpB,SAIKlB,EAAMtB,cAAcoE,QAAQhC,KAAI,SAAAiC,GAAM,OACnC,wBAA2BlE,MAAOkE,EAAOlE,MAAzC,SAAiDkE,EAAOC,cAA3CD,EAAOlE,YAG5C,MACJ,QACI2D,EAAe,+CACKd,UAAWe,EAAaG,KAAK,MACzB5C,EAAMtB,eAFf,IAGKG,MAAOmB,EAAMnB,MACbgE,SAAU7C,EAAMkB,WAE5C,IAAI+B,EAAkB,KAItB,OAHIjD,EAAMgB,SAAWhB,EAAMd,UACvB+D,EAAkB,mBAAGvB,UAAWC,IAAQuB,gBAAtB,0CAGlB,sBAAKxB,UAAWC,IAAQwB,MAAxB,UACI,uBAAOzB,UAAWC,IAAQyB,MAA1B,SAAkCpD,EAAMqD,QACvCb,EACAS,O,mBCnDb9E,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,MAAQ,qBAAqB,aAAe,4BAA4B,QAAU,uBAAuB,gBAAkB","file":"static/js/4.f8d6e7d2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__1Zul_\",\"Input\":\"Auth_Input__2LQ-q\"};","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport classes from './Auth.module.css';\nimport * as actions from '../../store/actions/index';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport { updateObject,checkValidity } from '../../shared/utility';\n\nclass Auth extends Component{\n\n    state = {\n        controls : {\n            email : {\n                elementType : 'input',\n                elementConfig : {\n                    type : 'email',\n                    placeholder : 'Mail Address'\n                },\n                value : '',\n                validation : {\n                    required : true,\n                    isEmail : true\n                },\n                valid : false,\n                touched : false\n            },\n            password : {\n                elementType : 'input',\n                elementConfig : {\n                    type : 'password',\n                    placeholder : 'Password'\n                },\n                value : '',\n                validation : {\n                    required : true,\n                    minLength : 6\n                },\n                valid : false,\n                touched : false\n            }\n        },\n        isSignup : true\n    }\n\n    componentDidMount(){\n        if(!this.props.buildingBurger && this.props.authRedirectPath !== '/'){\n            this.props.onSetAuthRedirectPath();\n        }\n    }\n\n    inputChangedHandler = (event, controlName) => {\n\n        const updatedControls = updateObject(this.state.controls, {\n            [controlName]: updateObject(this.state.controls[controlName],{\n                value: event.target.value,\n                valid : checkValidity(event.target.value,this.state.controls[controlName].validation),\n                touched : true\n            })\n        });\n        this.setState({controls : updatedControls});\n    }\n\n    submitHandler = (event) => {\n        event.preventDefault();\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\n    }\n\n    switchAuthModeHandler = () => {\n        this.setState(prevState => {\n            return {isSignup : !prevState.isSignup};\n        });\n    };\n\n    render (){\n        const formElementsArray = [];\n        for(let key in this.state.controls){\n            formElementsArray.push({\n                id: key,\n                config : this.state.controls[key]\n            })\n        }\n\n        let form = formElementsArray.map(formElement => (\n            <Input \n                key={formElement.id}\n                elementType={formElement.config.elementType}\n                elementConfig={formElement.config.elementConfig}\n                value={formElement.config.value}\n                invalid={!formElement.config.valid}\n                shouldValidate={formElement.config.validation}\n                touched={formElement.config.touched}\n                changed={(event) => this.inputChangedHandler(event,formElement.id)}/>\n        )\n        );\n        \n        if(this.props.loading){\n            form = <Spinner/>\n        }\n\n        let errorMessage = null;\n\n        if(this.props.error){\n            errorMessage = (\n                <p>{this.props.error.message}</p>\n            )\n        }\n\n        let authRedirect = null;\n        if(this.props.isAuthenticated){\n            authRedirect = <Redirect to={this.props.authRedirectPath}/>\n        }\n        return(\n            <div className={classes.Auth}>\n                {authRedirect}\n                {errorMessage}\n                <form onSubmit={this.submitHandler}>\n                    {form}\n                    <Button btnType=\"Success\">SUBMIT</Button>\n                </form>\n                <Button \n                    clicked={this.switchAuthModeHandler}\n                    btnType=\"Danger\">SWITCH TO {this.state.isSignup ? 'SIGNIN' : 'SIGNUP'}</Button>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        loading : state.auth.loading,\n        error : state.auth.error,\n        isAuthenticated : state.auth.token !== null,\n        buildingBurger : state.burgerBuilder.building,\n        authRedirectPath : state.auth.authRedirectPath\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth : (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\n        onSetAuthRedirectPath : () => dispatch(actions.setAuthRedirectPath('/'))\n    }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Auth);","import React from 'react';\nimport classes from './Input.module.css';\n\nconst input = (props) => {\n\n    let inputElement = null;\n    const inputClasses = [classes.InputElement];\n\n    if (props.invalid && props.shouldValidate && props.touched){\n        inputClasses.push(classes.Invalid);\n    }\n\n    switch (props.elementType){\n        case ( 'input' ) :\n            inputElement = <input \n                                className={inputClasses.join(' ')} \n                                {...props.elementConfig} \n                                value={props.value}\n                                onChange={props.changed} />\n            break;\n        case ( 'textarea' ) :\n            inputElement = <textarea \n                                className={inputClasses.join(' ')} \n                                {...props.elementConfig} \n                                value={props.value}\n                                onChange={props.changed} />\n            break;\n        case ( 'select' ) :\n            inputElement = (<select \n                                className={inputClasses.join(' ')}\n                                value={props.value} \n                                onChange={props.changed}>\n                                {props.elementConfig.options.map(option => (\n                                    <option key={option.value} value={option.value}>{option.displayValue}</option>\n                                ))}\n                            </select>)\n            break;\n        default :\n            inputElement = <input \n                                className={inputClasses.join(' ')} \n                                {...props.elementConfig} \n                                value={props.value}\n                                onChange={props.changed} />\n    }\n    let validationError = null;\n    if (props.invalid && props.touched) {\n        validationError = <p className={classes.ValidationError}>Please enter a valid value!</p>;\n    }\n    return (\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n            {validationError}\n        </div>\n    );\n    \n}\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\",\"ValidationError\":\"Input_ValidationError__qMR97\"};"],"sourceRoot":""}