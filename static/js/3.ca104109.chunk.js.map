{"version":3,"sources":["containers/Checkout/ContactData/ContactData.js","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css","containers/Checkout/ContactData/ContactData.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css"],"names":["ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","pincode","minLength","maxLength","country","email","deliveryMethod","options","displayValue","isFormValid","orderHandler","event","preventDefault","formData","formElementIdentifier","order","ingredients","props","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","setState","formElementsArray","key","this","push","id","config","form","onSubmit","map","formElement","Input","invalid","shouldValidate","changed","Button","btnType","disabled","loading","Spinner","className","classes","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","checkoutSummary","CheckoutSummary","style","width","margin","Burger","clicked","checkoutCancelled","checkoutContinued","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","to","purchasedRedirect","purchased","path","match","component","input","inputElement","inputClasses","InputElement","Invalid","join","onChange","option","validationError","ValidationError","Label","label","module","exports"],"mappings":"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","file":"static/js/3.ca104109.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport Button from '../../../components/UI/Button/Button';\nimport classes from './ContactData.module.css';\nimport axios from '../../../axios-orders';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input'; \nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../../store/actions/index';\nimport { updateObject,checkValidity } from '../../../shared/utility';\n\nclass ContactData extends Component{\n    state = {\n        orderForm : {\n            name : {\n                elementType : 'input',\n                elementConfig : {\n                    type : 'text',\n                    placeholder : 'Your Name'\n                },\n                value : '',\n                validation : {\n                    required : true\n                },\n                valid : false,\n                touched : false\n            },\n            street : {\n                elementType : 'input',\n                elementConfig : {\n                    type : 'text',\n                    placeholder : 'Street'\n                },\n                value : '',\n                validation : {\n                    required : true\n                },\n                valid : false,\n                touched : false\n            },\n            pincode : {\n                elementType : 'input',\n                elementConfig : {\n                    type : 'text',\n                    placeholder : 'PIN CODE'\n                },\n                value : '',\n                validation : {\n                    required : true,\n                    minLength : 6,\n                    maxLength : 6\n                },\n                valid : false,\n                touched : false\n            },\n            country : {\n                elementType : 'input',\n                elementConfig : {\n                    type : 'text',\n                    placeholder : 'Country'\n                },\n                value : '',\n                validation : {\n                    required : true\n                },\n                valid : false,\n                touched : false\n            },\n            email : {\n                elementType : 'input',\n                elementConfig : {\n                    type : 'email',\n                    placeholder : 'Your Mail'\n                },\n                value : '',\n                validation : {\n                    required : true\n                },\n                valid : false,\n                touched : false\n            },\n            deliveryMethod : {\n                elementType : 'select',\n                elementConfig : {\n                    options : [\n                        {value : 'fastest', displayValue : 'Fastest'},\n                        {value : 'cheapest', displayValue : 'Cheapest'}\n                    ]\n                },\n                value : 'fastest',\n                valid : true\n            }\n        },\n        isFormValid : false\n    }\n\n    orderHandler = (event) => {\n        event.preventDefault();\n        const formData = {};\n        for ( let formElementIdentifier in this.state.orderForm) {\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n        }\n\n        const order = {\n            ingredients : this.props.ings,\n            price : this.props.price,\n            orderData : formData,\n            userId : this.props.userId\n        }\n        this.props.onOrderBurger(order,this.props.token);\n        \n    }\n\n    inputChangedHandler = (event, inputIdentifier) => {\n        \n        const updatedFormElement = updateObject(this.state.orderForm[inputIdentifier],{\n                value : event.target.value,\n                valid : checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation),\n                touched : true\n            });\n        \n        const updatedOrderForm = updateObject(this.state.orderForm, {\n                [inputIdentifier] : updatedFormElement\n            });\n        \n        let isFormValid = true;\n        for(let inputIdentifier in updatedOrderForm) {\n            isFormValid = updatedOrderForm[inputIdentifier].valid && isFormValid;\n        }\n\n        this.setState({\n            orderForm : updatedOrderForm,\n            isFormValid : isFormValid\n        });\n    } \n\n    render(){\n\n        const formElementsArray = [];\n        for(let key in this.state.orderForm){\n            formElementsArray.push({\n                id: key,\n                config : this.state.orderForm[key]\n            })\n        }\n\n        let form =(<form onSubmit={this.orderHandler}>\n                {formElementsArray.map(formElement => (\n                    <Input \n                        key={formElement.id}\n                        elementType={formElement.config.elementType}\n                        elementConfig={formElement.config.elementConfig}\n                        value={formElement.config.value}\n                        invalid={!formElement.config.valid}\n                        shouldValidate={formElement.config.validation}\n                        touched={formElement.config.touched}\n                        changed={(event) => this.inputChangedHandler(event,formElement.id)}/>\n                ))}\n                <Button btnType=\"Success\" disabled={!this.state.isFormValid}>ORDER</Button>\n            </form>\n        );\n        if(this.props.loading){\n            form = <Spinner/>\n        }\n        return(\n            <div className={classes.ContactData}>\n                <h4>Enter your Contact Data</h4>\n                {form}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        ings : state.burgerBuilder.ingredients,\n        price : state.burgerBuilder.totalPrice,\n        loading : state.order.loading,\n        token : state.auth.token,\n        userId : state.auth.userId\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return{\n        onOrderBurger: (orderData,token) => dispatch(actions.purchaseBurger(orderData,token))\n    };\n};\n\nexport default connect(mapStateToProps,mapDispatchToProps)(withErrorHandler(ContactData, axios));","import React from 'react';\nimport Burger from '../../Burger/Burger';\nimport Button from '../../UI/Button/Button';\nimport classes from './CheckoutSummary.module.css';\n\nconst checkoutSummary = (props) => {\n    return(\n        <div className={classes.CheckoutSummary}>\n            <h1>We hope it tests well!!\n                <div style={{width: '100%', margin : 'auto'}}>\n                    <Burger ingredients={props.ingredients}/>\n                </div>\n                <Button \n                    btnType='Danger' \n                    clicked={props.checkoutCancelled}>CANCEL</Button>\n                <Button \n                    btnType='Success' \n                    clicked={props.checkoutContinued}>CONTINUE</Button>\n            </h1>\n        </div>\n    );\n}\n\nexport default checkoutSummary;","import React, { Component } from 'react';\nimport { Route,Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport ContactData from './ContactData/ContactData';\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\n\n class Checkout extends Component{\n\n    checkoutCancelledHandler = () => {\n        this.props.history.goBack();\n    }\n\n    checkoutContinuedHandler = () => {\n        this.props.history.replace('/checkout/contact-data');\n    }\n\n     render(){\n         let summary = <Redirect to=\"/\"/>\n         if(this.props.ings){\n\n            const purchasedRedirect = this.props.purchased ? <Redirect to=\"/\"/> : null\n\n            summary = (\n            <div>\n                {purchasedRedirect}\n                <CheckoutSummary \n                    ingredients={this.props.ings}\n                    checkoutCancelled={this.checkoutCancelledHandler}\n                    checkoutContinued={this.checkoutContinuedHandler}/>\n                <Route \n                    path={this.props.match.path + '/contact-data'}\n                    component={ContactData}/>\n             </div>)\n         }\n         return(summary);\n     }\n }\n\n const mapStateToProps = state => {\n    return {\n        ings : state.burgerBuilder.ingredients,\n        purchased : state.order.purchased\n    };\n };\n\n\n export default connect(mapStateToProps)(Checkout);","import React from 'react';\nimport classes from './Input.module.css';\n\nconst input = (props) => {\n\n    let inputElement = null;\n    const inputClasses = [classes.InputElement];\n\n    if (props.invalid && props.shouldValidate && props.touched){\n        inputClasses.push(classes.Invalid);\n    }\n\n    switch (props.elementType){\n        case ( 'input' ) :\n            inputElement = <input \n                                className={inputClasses.join(' ')} \n                                {...props.elementConfig} \n                                value={props.value}\n                                onChange={props.changed} />\n            break;\n        case ( 'textarea' ) :\n            inputElement = <textarea \n                                className={inputClasses.join(' ')} \n                                {...props.elementConfig} \n                                value={props.value}\n                                onChange={props.changed} />\n            break;\n        case ( 'select' ) :\n            inputElement = (<select \n                                className={inputClasses.join(' ')}\n                                value={props.value} \n                                onChange={props.changed}>\n                                {props.elementConfig.options.map(option => (\n                                    <option key={option.value} value={option.value}>{option.displayValue}</option>\n                                ))}\n                            </select>)\n            break;\n        default :\n            inputElement = <input \n                                className={inputClasses.join(' ')} \n                                {...props.elementConfig} \n                                value={props.value}\n                                onChange={props.changed} />\n    }\n    let validationError = null;\n    if (props.invalid && props.touched) {\n        validationError = <p className={classes.ValidationError}>Please enter a valid value!</p>;\n    }\n    return (\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n            {validationError}\n        </div>\n    );\n    \n}\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\",\"ValidationError\":\"Input_ValidationError__qMR97\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__20AK_\",\"Input\":\"ContactData_Input__2fK5-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__3PsXi\"};"],"sourceRoot":""}